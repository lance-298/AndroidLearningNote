1、内存泄漏与内存溢出的区别，以及出现的场景

https://www.bilibili.com/video/BV1n44y1K7xS?p=14&spm_id_from=pageDriver

内存溢出OOM，是应用实际使用的内存，超过了给该应用分配的内存，没有足够的内存空间供其实用，从而出现out of memory error。
产生原因：比如，持续创建大内存的对象，不进行回收；循环引用，A持有B，B也持有A，在解析JSON中可能会遇到
解决方法：使用后的对象进行及时清除（置null)，避免循环引用

内存泄漏，是程序中在申请内存后，被某个对象一直持有，无法释放已申请的内存空间（生命周期长的对象，持有生命周期短的对象的引用，导致生命周期短的对象结束后，无法进行回收）。单次内存泄漏的危害可以忽略，但如果出现堆积，内存迟早会溢出。
常见的内存泄漏有很多种：

1） 非静态内部类/匿名内部类的静态实例容易造成内存泄漏
产生原因：外部类使用结束后，因非静态内部类（如Handler）/匿名内部类的静态实例（如Thread）会隐式持有外部类的引用，导致外部类无法进行内存回收，从而造成内部泄漏；
解决方法： 可以使用外部类 + weakreference

2） 单例模式导致的内存泄漏
产生原因：因为单例模式的生命周期与应用生命周期相同，如果单例模式的入参或者其他引用生命周期短的对象，会造成内部泄漏
解决方法：使用同单例同周期（应用生命周期的对象）的对象作为入参；或者对短周期的对象，进行弱引用

3）对该解注册、注销、清空的对象没有及时做这样操作导致的，比如说广播、服务、io流等等。(其实我个人觉得这一条的最终原因还是第一条，因为说到底还是引用没有释放使jvm没有不能回收)
产生原因：未取消注册或者回调，观察者模式，因为作为匿名内部类持有外部引用，所以记得在不用或销毁时取消注册或者移除回调




2、内存分析使用的工具
1）leakcanary 不直观
核心原理及代码：https://www.bilibili.com/video/BV1n44y1K7xS?p=14&spm_id_from=pageDriver
主要检测对象：已销毁的activity实例；销毁的fragment实例；销毁的fragmentview实例；已清楚的viewmodel实例。

2）Android studio -> androif profiler -> memory -> heap dump(保存的堆转储文件hprof) -> Leaks

3)MAT(memory analysis tool) 可以通过Android studio生成的hprof转换后，进行分析
