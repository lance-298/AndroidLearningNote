
##1、AlertDialog，Toast 对 Activity 生命周期的影响


https://blog.csdn.net/cloud_castle/article/details/56011562
【参考】：无论 Dialog 弹出覆盖页面，对 Activity 生命周期没有影响，只有再启动另外一个
Activity 的时候才会进入 onPause 状态，而不是想象中的被覆盖或者不可见，同时通过
AlertDialog 源 码 或 者 Toast 源 码 我 们 都 可 以 发 现 它 们 实 现 的 原 理 都 是
windowmanager.addView();来添加的， 它们都是一个个 view ,因此不会对 activity 的生命周
期有任何影响。


##2、Service与Activity的通信方式，如果需要service将实时进度传递给activity进行展示，需要什么方式

https://blog.csdn.net/xiaanming/article/details/9750689
Binder、Intent、接口、广播


##3、IPC通信方式有哪些？实际开发中遇到哪些IPC的问题

Socket、Pipe、Binder(AIDL、 Messenger)



##4、线程间通信方式有哪些？

handler、sharedpreferences、文件、contentprovider


##5、onSaveInstanceState主要作用，以及使用场景，与onRestoreSaveInstance是否一一对应？


https://github.com/yangkun19921001/Blog/blob/master/%E7%AC%94%E8%AF%95%E9%9D%A2%E8%AF%95/Android%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E5%BF%85%E5%A4%87/Android/Android%20%E5%9F%BA%E7%A1%80/Activity.md
Activity的 onSaveInstanceState() 和 onRestoreInstanceState()并不是生命周期方法，它们不同于 onCreate()、onPause()等生命周期方法，它们并不一定会被触发。
当应用遇到意外情况（如：内存不足、用户直接按Home键）由系统销毁一个Activity时，onSaveInstanceState() 会被调用。但是当用户主动去销毁一个Activity时，
例如在应用中按返回键，onSaveInstanceState()就不会被调用。因为在这种情况下，用户的行为决定了不需要保存Activity的状态。
通常onSaveInstanceState()只适合用于保存一些临时性的状态，而onPause()适合用于数据的持久化保存。 
在activity被杀掉之前调用保存每个实例的状态,以保证该状态可以在onCreate(Bundle)或者onRestoreInstanceState(Bundle) (传入的Bundle参数是由onSaveInstanceState封装好的)中恢复。
这个方法在一个activity被杀死前调用，当该activity在将来某个时刻回来时可以恢复其先前状态。 
例如，如果activity B启用后位于activity A的前端，在某个时刻activity A因为系统回收资源的问题要被杀掉，A通过onSaveInstanceState将有机会保存其用户界面状态，
使得将来用户返回到activity A时能通过onCreate(Bundle)或者onRestoreInstanceState(Bundle)恢复界面的状态


##6、activity的启动模式，以及常用的使用场景：

https://github.com/yangchong211/YCBlogs/blob/master/android/%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/02.Activity%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D.md


##7、如何自定义view？流程是什么？是否经常使用？


8、
