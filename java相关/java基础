
###1、接口和抽象类的异同

https://www.bilibili.com/video/BV14T4y1e725/?spm_id_from=333.788
接口是一种规范，一般是对抽象类的进一步抽象；
接口只有抽象方法和静态常量，不能定义成员属性，只能定义静态属性，只能定义final修饰的静态常量（Java8中增加了default方法、静态方法，Java9增加了私有方法）；接口可以有抽象方法，也可以没有，可以有成员属性；
接口继承接口，一个类只能继承一个类，但是可以实现多个方法；
如果需要继承父类的成员变量，或者需要控制子类的实例化，则选抽象类；优先选择接口，避免单继承的局限


###2、static有什么作用



###3、==与equals的异同

在java中，==与equals都是用来判断两个数据是否相等，两种方式有各自的应用场景

对于==：基本数据比较的是值，引用数据比较的是对象地址。但是Java中只有值传递，对象只不过是传递的值为对象的地址而已。
即使两个对象的属性完全一样，他们也不能算相等的，如果想要比较两个对象的属性，那么就需要使用equals方法了。

对于equals：该方法是顶层父类object中的方法，如果没有进行重写，那么equals和==是等价的；
equals不能比较基本数据类型，当比较包装类时，包装类重写了equals方法，首先会判断包装类型是否一致，一致的话再比较值是否相等，否则就不相等，
例如，虽然Integer(4)与Long(4)值相等，但是equals比较也不相等。



###4、hashcode()是如何生成的，有什么作用
hashcode方法与equals方法一样，都定义在顶层父类object中，一般两个方法会搭配使用，用来判断对象是否相等。

hashcode方法是native方法，如果没有重写，它通常会将内存地址转换为int数值进行返回，这个数值就是hash码，也叫散列码。
hash码的作用是确定对象在哈希表中的索引位置，我们在存放对象时，可以通过哈希码来和数组长度取余，来确定对象存储在数组中的位置。
比如，数组长度为10，对象的哈希码为17，那么17%10==7，就可以将该对象存放在下标为7的位置上，这样无论是存储元素还是获取元素，通过数组下标就只用操作一次，大幅提高效率。
问题：哈希码可能相同，造成哈希冲突
解决方法：发生哈希冲突时，首先要判断两个对象是否相同，如果相同（重复元素，不进行存储），则不进行插入，如果不同，再使用其他方法进行存储。
而两个哈希冲突的对象如何判断是否相等呢，可以使用equals方法。
一般hashcode和equals方法需要同时重写，因为hashcode方法用来定位索引位置，再提高效率的同时，可能会发生哈希冲突。当哈希冲突时，我们就得通过equals方法来判断冲突的对象是否相等。
如果只重写了hashcode方法，那么哈希冲突时，即使两个对象相等，也不会判断为重复，导致数组里存储重复对象；
如果只重写了equals方法，那两个相等的对象，内存地址不相同，还是会导致数组出现重复对象。




###5、集合Collection和Map

Java中的集合分为两种，为Collection和Map，Collection主要用来存放单一类型的元素，Map则用来存放映射（键值对）关系。

Collection---List，存储的元素是有序的（非元素值的有序排列，为插入元素的顺序），且是可重复的，最常用的实现类为ArrayList
          ---Set，存储的元素不可重复，并且元素往往是无序的，最常用的实现类为HashSet。
          ---Queue，存储的元素是有序的（非元素值的有序排列），且是可重复的，与List很像，不过并非指插入元素时的顺序，而是指特定规则下的顺序。
              最大的特性是，按照特定的规则去操作元素，比如先进先出的规则，常用的实现类有ArrayDeque和LinkedList(实现queue和list)。
          
Map---HashMap
   ---HashTable
   

###6、集合Collection和Map，如何查找数据
 Collection的实现类都各有特性，对数据的处理方式各不相同，所以不好定义直接访问数据的方法。为了兼顾各子类的特性，又能提供访问数据的共性，Collection选择了迭代器模式。
 
 Java中的迭代器就是一个接口，主要有hasNext()和next()方法。
 public interface Iterator<E> {
    /**
     * Returns {@code true} if the iteration has more elements.
     * (In other words, returns {@code true} if {@link #next} would
     * return an element rather than throwing an exception.)
     *
     * @return {@code true} if the iteration has more elements
     */
    boolean hasNext();

    /**
     * Returns the next element in the iteration.
     *
     * @return the next element in the iteration
     * @throws NoSuchElementException if the iteration has no more elements
     */
    E next();
  }



